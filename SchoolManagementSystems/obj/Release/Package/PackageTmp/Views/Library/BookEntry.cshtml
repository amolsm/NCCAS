@model Entity.libBookentry

@{
    ViewBag.Title = "BookEntry";
    Layout = "~/Views/shared/_SharedLayout.cshtml";
}
<div id="confirm" class="modal hide fade">
    <div class="modal-body">
       Book with Same Call No. exist.Do you want to add Copy?
    </div>
    <div class="modal-footer">
        <button type="submit" data-dismiss="modal" class="btn btn-primary" id="addCopy">AddCopy</button>
        <button type="button" data-dismiss="modal" class="btn" id="btncancel">Cancel</button>
    </div>
</div>

<div id="saveconfirm" class="modal hide fade">
    <div class="modal-body">
    Copies of Same Book details are exist Changes will be updated to all copies.
   <br/> 
    </div>
    <div class="modal-footer">
        <button type="button" data-dismiss="modal" class="btn btn-primary" id="editCopy">SaveCopy</button>
       <button type="button" data-dismiss="modal" class="btn" id="btnCancel">Cancel</button>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        $("#tabs").tabs();
    });
    $(document).ready(function () {
        
        $('#Bookid input').attr("readonly", true);
        $('#AccessorNo').attr("readonly", true);
        if ($("#Bookid input").val() == "0") {
            $("#Bookid").hide();

        } else {
          
            act = '@Url.Action("FillBookDetails")';
            var bookid = $("#Bookid input").val();
            $.ajax({
                type: 'GET',
                url: act,
                dataType: 'JSON',
                data: { bookid: bookid },
                success: function (data) {
                   
                    $("#Bookid input").val(data.bookid);
                    $("#booktitle").val(data.BookName);
                    $("#CallNo").val(data.CallNo);
                    $("#Volume").val(data.Volume);
                    $("#SerielNumber").val(data.SerialNo);
                    $("#Authorid").val(data.Authorid);
                    $("#Authorname").val(data.Authorname);
                    $("#PublishedByid").val(data.Publisherid);
                    $("#PublishedByName").val(data.PublisherName);
                    $("#Edition").val(data.Edition);
                    $("#Vendorid").val(data.Vendorid);
                    $("#Vendorname").val(data.Vendorname);
                    var date1 = new Date(parseInt(data.Dateofpurchase.substr(6)));
                    $('#datepicker1').datepicker('setDate', date1);
                
                    $("#BillNo").val(data.BillNo);
                    $("#Cost").val(data.Cost);
                    $("#AccessorNo").val(data.AccessorNo);
                    $("#ShelfNo").val(data.SelfNo);
                    $("#callnumbers").val(data.CallNo);
                    $("#CourseId").val(data.CourseId);
                    $("#DeptId").val(data.DeptId);
                    $("#BookCategoryid").val(data.CategoryId);
                   
                  

                  
                }
            });
        }
       
        $("#CourseId").change(function () {

            ReloadCourse();
        })

      




        function ReloadDepartment() {
            $("#DeptId").empty();
            var item = '<option value="">select Department</option>';
            $("#DeptId").append(item);
        }

        function ReloadCourse() {
            if ($("#CourseId").val() == "") {
                ReloadDepartment();
            }
            else {

                $("#DeptId").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCourse")',
                    dataType: 'json',
                    data: { id: $("#CourseId").val() },
                    success: function (course) {
                        if (course != "") {

                            var item = '<option value="">select Department</option>';
                            $.each(course, function (i, course) {
                                item += '<option value="' + course.Value + '">' + course.Text + '</option>';
                            });
                            $("#DeptId").append(item);
                        }
                        else {
                            var item = '<option value="">select Department</option>';
                            $("#DeptId").append(item);
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve course.' + ex);
                    }
                });
            }
            return false;
        }

        $("#LibType").change(function () {

            ReloadCourse1();
        })





        function ReloadDepartment1() {
            $("#Department").empty();
            var item = '<option value="">select Department</option>';
            $("#Department").append(item);
        }

        function ReloadCourse1() {
            if ($("#LibType").val() == "") {
                ReloadDepartment1();
            }
            else {

                $("#Department").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCourse")',
                    dataType: 'json',
                    data: { id: $("#LibType").val() },
                    success: function (course) {
                        if (course != "") {

                            var item = '<option value="">select Department</option>';
                            $.each(course, function (i, course) {
                                item += '<option value="' + course.Value + '">' + course.Text + '</option>';
                            });
                            $("#Department").append(item);
                        }
                        else {
                            var item = '<option value="">select Department</option>';
                            $("#Department").append(item);
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve course.' + ex);
                    }
                });
            }
            return false;
        }

        $('#journalid input').attr("readonly", true);
        if ($("#journalid input").val() == "0") {
            $("#journalid").hide();
        } else {
            act = '@Url.Action("FillJournalDetails")';
            var jid = $("#journalid input").val();
            $.ajax({
                type: 'GET',
                url: act,
                dataType: 'JSON',
                data: { jid: jid },
                success: function (data) {
                   
                    $("#journalid input").val(data.lib_Jid);
                    $("#LibType").val(data.LibType);
                  
                    $("#Department").val(data.Department);
                    $("#JournalTitle").val(data.JournalTitle);
                    $("#LibJVolume").val(data.Volume);
                    $("#Number").val(data.Number);
                    var date2 = new Date(parseInt(data.IssueDate.substr(6)));
                    $('#datepicker2').datepicker('setDate', date2);
                   
                    $("#JVendorId").val(data.Vendorid);
                    var date3 = new Date(parseInt(data.PurchaseDate.substr(6)));
                    $('#datepicker3').datepicker('setDate', date3);

               
                    $("#JBillNo").val(data.JBillNo);
                    $("#IssueType").val(data.IssueType);
                    $("#JPublisher").val(data.Publisher);
                    $("#JShelfNo").val(data.shelfno);
                    $("#JShelfNo").val(data.shelfno);
                    $("#JCost").val(data.jcost);
                    if (data.lib_Jid != 0) {

                        $('.navbar-nav > .active').next('li').find('a').trigger('click');
                    }
                 
                }
            });
        }

        $("#BookInsert").click(function (e) {
            Validations1(e);
           
           
           

        });

      

        function Validations1(e) {
            var cnt = 0;
            if ($("#booktitle").val() == '') {
                cnt++;
                $("#booktitle").css({
                    "border": "1px solid red"
                });
                alert("Book Title is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#booktitle").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#CallNo").val() == '') {
                cnt++;
                $("#CallNo").css({
                    "border": "1px solid red"
                });
                alert("CallNo  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#CallNo").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Volume").val() == '') {
                cnt++;
                $("#Volume").css({
                    "border": "1px solid red"
                });
                alert("Volume  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#Volume").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#SerielNumber").val() == '') {
                cnt++;
                $("#SerielNumber").css({
                    "border": "1px solid red"
                });
                alert("SerielNumber  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#SerielNumber").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Authorid").val() == '') {
                cnt++;
                $("#Authorid").css({
                    "border": "1px solid red"
                });
                alert("Author  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#Authorid").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#PublishedByid").val() == '') {
                cnt++;
                $("#PublishedByid").css({
                    "border": "1px solid red"
                });
                alert("PublishedBy  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#PublishedByid").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Edition").val() == '') {
                cnt++;
                $("#Edition").css({
                    "border": "1px solid red"
                });
                alert("Edition  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#Edition").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Vendorid").val() == '') {
                cnt++;
                $("#Vendorid").css({
                    "border": "1px solid red"
                });
                alert("Vendor  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#Vendorid").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#datepicker1").val() == '') {
                cnt++;
                $("#datepicker1").css({
                    "border": "1px solid red"
                });
                alert("Date of Purchase  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#datepicker1").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#BillNo").val() == '') {
                cnt++;
                $("#BillNo").css({
                    "border": "1px solid red"
                });
                alert("Date of Purchase  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#BillNo").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Cost").val() == '') {
                cnt++;
                $("#Cost").css({
                    "border": "1px solid red"
                });
                alert("Cost  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#Cost").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#AccessorNo").val() == '') {
                cnt++;
                $("#AccessorNo").css({
                    "border": "1px solid red"
                });
                alert("Accesson No.  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#AccessorNo").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#ShelfNo").val() == '') {
                cnt++;
                $("#ShelfNo").css({
                    "border": "1px solid red"
                });
                alert("ShelfNo  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#ShelfNo").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#CourseId").val() == '') {
                cnt++;
                $("#CourseId").css({
                    "border": "1px solid red"
                });
                alert("Course  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#CourseId").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#DeptId").val() == '') {
                cnt++;
                $("#DeptId").css({
                    "border": "1px solid red"
                });
                alert("Department  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#DeptId").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#BookCategoryid").val() == '') {
                cnt++;
                $("#BookCategoryid").css({
                    "border": "1px solid red"
                });
                alert("Category  is Mandatory!");
                e.preventDefault();
                return false;
            }
            else {
                $("#BookCategoryid").css({
                    "border": "",
                    "background": ""
                });
            }
            if (cnt != 0) {
                e.preventDefault();
            } else {
                var c = $('#callnumbers').val();
                debugger;
                if (c != 0) {
                  
                    $('#saveconfirm').modal({
                        backdrop: 'static',
                        keyboard: false
                    })

                    .one('click', '#editCopy', function (e) {
                        document.forms[0].method = "Post";
                        document.forms[0].action = "BookEntry?command=BookSubmit";
                        document.forms[0].submit();
                      
                    
                    })
                      .one('click', '#btncancel', function (e) {

                          e.preventDefault();
                    
                      }
                    );
                    e.preventDefault();
                 

                }
            }
        }

                        
                        

                  

           
       

     
           

        $("#JournalInsert").click(function (e) {
            Validations2(e);
        });
        function Validations2(e) {
            var cnt = 0;
            if ($("#LibType").val() == '' || $("#LibType").val() == '0') {
                cnt++;
                $("#LibType .add-on").css({
                    "border": "solid 2px #004a80"
                });
                e.preventDefault();
                return false;
            }
            else {
                $("#LibType").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Department").val() == '') {
                cnt++;
                $("#Department").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#Department").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#JournalTitle").val() == '') {
                cnt++;
                $("#JournalTitle").css({
                    "border": "solid 2px"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#JournalTitle").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#LibJVolume").val() == '') {
                cnt++;
                $("#LibJVolume").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#LibJVolume").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#Number").val() == '') {
                cnt++;
                $("#Number").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#Number").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#datepicker2").val() == '') {
                cnt++;
                $("#datepicker2").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#datepicker2").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#datepicker3").val() == '') {
                cnt++;
                $("#datepicker3").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#datepicker3").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#JVendorId").val() == '') {
                cnt++;
                $("#JVendorId").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#JVendorId").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#JBillNo").val() == '') {
                cnt++;
                $("#JBillNo").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#JBillNo").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#IssueType").val() == '') {
                cnt++;
                $("#IssueType").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#IssueType").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#JPublisher").val() == '') {
                cnt++;
                $("#JPublisher").css({
                    "border": "solid 2px #004a80"
                });

                e.preventDefault();
                return false;
            }
            else {
                $("#JPublisher").css({
                    "border": "",
                    "background": ""
                });
            }
            if (cnt != 0) {
                e.preventDefault();
            }
        }

       
        $('#CallNo').blur(function () {
            var Call_number = $('#CallNo').val();
            clear();
          
           // BookDetailShow();
            $.ajax({
                type: 'GET',
                url: '@Url.Action("check_duplicate_CallNo")',
                dataType: 'JSON',
                data: { Call_number: Call_number },
                success: function (data) {
                 if (data != null) {
                        $('#confirm').modal({
                            backdrop: 'static',
                            keyboard: false
                        })
                        .one('click', '#addCopy', function (e) {

                            $("#booktitle").val(data.BookName);

                            $("#CallNo").val(data.CallNo);

                            $("#Volume").val(data.Volume);

                            $("#SerielNumber").val(data.SerialNo);

                            $("#Authorid").val(data.Authorid);

                            $("#Authorname").val(data.Authorname);

                            $("#PublishedByid").val(data.Publisherid);

                            $("#PublishedByName").val(data.PublisherName);

                            $("#Edition").val(data.Edition);

                            $("#Vendorid").val(data.Vendorid);

                            $("#Vendorname").val(data.Vendorname);
                            var date1 = new Date(parseInt(data.Dateofpurchase.substr(6)));
                            $('#datepicker1').datepicker('setDate', date1);


                            $("#BillNo").val(data.BillNo);

                            $("#Cost").val(data.Cost);
                            $("#CourseId").val(data.CourseId);
                            $("#DeptId").val(data.DeptId);
                            $("#BookCategoryid").val(data.CategoryId);
                            $("#callnumbers").val(0);
                            BookDetailshide();
                       
                        
                        });
                        debugger;
                        clear();
                     
                      
                       return false;
                    } 
                }
            });
        });
        $("#Authorid").change(function () {

            if ($("#Authorid option:selected").text() == "Others") {
                //$('#author').show();
                $('#author input').attr("readonly", false);
                //$('#author').fadeIn('slow');
            }
            else {
                $('#author input').attr("readonly", true);
            }


        })
        $("#PublishedByid").change(function () {

            if ($("#PublishedByid option:selected").text() == "Others") {
                $('#publisher input').attr("readonly", false);
                //$('#publisher').show();
                //$('#publisher').fadeIn('slow');
            }
            else {
                //$('#publisher').hide();
                //$('#publisher').fadeOut('slow');
                $('#publisher input').attr("readonly", true);
            }


        })

        function BookDetailshide()
        {
            $('#booktitle').attr("readonly", true);
            $('#Volume').attr("readonly", true);
            $('#SerielNumber').attr("readonly", true);
            $('#Authorid').attr("readonly", true);
            $('#Authorname').attr("readonly", true);
            $('#PublishedByid').attr("readonly", true);
            $('#PublishedByName').attr("readonly", true);
            $('#Edition').attr("readonly", true);
            $('#Vendorid').attr("readonly", true);
            $('#Vendorname').attr("readonly", true);
            $('#datepicker1').attr("readonly", true);
            $('#BillNo').attr("readonly", true);
            $('#Cost').attr("readonly", true);
        }
        function BookDetailShow() {
            $('#booktitle').attr("readonly", false);
            $('#Volume').attr("readonly", false);
            $('#SerielNumber').attr("readonly", false);
            $('#Authorid').attr("readonly", false);
            $('#Authorname').attr("readonly", false);
            $('#PublishedByid').attr("readonly", false);
            $('#PublishedByName').attr("readonly", false);
            $('#Edition').attr("readonly", false);
            $('#Vendorid').attr("readonly", false);
            $('#Vendorname').attr("readonly", false);
            $('#datepicker1').attr("readonly", false);
            $('#BillNo').attr("readonly", false);
            $('#Cost').attr("readonly", false);
        }
        $("#Vendorid").change(function () {

            if ($("#Vendorid option:selected").text() == "Others") {
                //$('#vendor').show();
                //$('#vendor').fadeIn('slow');
                $('#vendor input').attr("readonly", false);
            }
            else {
                $('#vendor input').attr("readonly", true);
            }


        })
        $('#datepicker1').attr("readonly", true);

        $('#datepicker1').datepicker({
            inline: true,
            showOtherMonths: true,
            showOtherYears: true,
            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            yearRange: "-100:+0",
            changeYear: true
        });

        $('#datepicker1').datepicker('setDate', new Date());
        $('#datepicker2').attr("readonly", true);

        $('#datepicker2').datepicker({
            inline: true,
            showOtherMonths: true,
            showOtherYears: true,
            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            yearRange: "-100:+0",
            changeYear: true
        });

        $('#datepicker2').datepicker('setDate', new Date());

        $('#datepicker3').attr("readonly", true);

        $('#datepicker3').datepicker({
            inline: true,
            showOtherMonths: true,
            showOtherYears: true,
            dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            yearRange: "-100:+0",
            changeYear: true
        });

        $('#datepicker3').datepicker('setDate', new Date());
        $('#datepicker1').datepicker();
        $('#datepicker1').val("");

        $('#datepicker2').datepicker();
        $('#datepicker2').val("");

        $('#datepicker3').datepicker();
        $('#datepicker3').val("");
     
        function clear() {
         
            $("#booktitle").val('');
          
            $("#Volume").val('');
            $("#SerielNumber").val('');
            $("#Authorid").val('0');
            $("#PublishedByid").val('0');
            $("#Authorname").val('');
            $("#PublishedByName").val('');
            $("#Vendorname").val('');
            $("#Edition").val('');
            $("#Vendorid").val('');
            $("#datepicker1").val('');
            $("#BillNo").val('');
            $("#Cost").val('');
            $("#CourseId").val('0');
            $("#DeptId").val('0');
            $("#BookCategoryid").val('0');
            $("#journalid").hide();
            $('#journalid input').val('0');
            $("#LibType").val('0');

            $("#Department").val('0');
            $('#JournalTitle').val('');
            $("#LibJVolume").val('');
            $("#Number").val('');
            $("#datepicker2").val('');
            $("#JVendorId").val('0');
            $("#datepicker3").val('');
            $("#JBillNo").val('');
            $("#IssueType").val('0');
            $("#JPublisher").val('');
            $("#JShelfNo").val('');
            $("#JCost").val('');
            $("#callnumbers").val('0');

        }
       
      
        

    });
    </script>
<script type="text/javascript">
  
    $(document).ready(function () {
   
        $('#Bookid input').attr("readonly", true);
        $("#Bookid input").val() == "0";
        $('#author input').attr("readonly", true);
        $('#publisher input').attr("readonly", true);
        $('#vendor input').attr("readonly", true);
       
    });
   
</script>
<style type="text/css">
    .ui-datepicker-calendar {
        background-color: antiquewhite;
    }

    fieldset {
        border: 1px solid #777;
    }

    /*.controls {
        border: 1px solid;
    }
    .input {
        border: 1px solid;
        border-color:red;
    }*/
    .form-horizontal .controls {
        margin-left: 45.5%;
    }

    .form-horizontal .control-group {
        margin-bottom: 5px;
        margin-left: 5%;
        margin-top: 5px;
    }

    legend {
        float: left;
        margin-right: 0.5em;
        padding-top: 0.2em;
        text-align: left;
        font-size: 18px;
        background-color: gainsboro;
    }

    .ui-datepicker-title {
        background-color: antiquewhite;
    }

    .form-horizontal .control-group {
        margin-top: 5px;
        margin-bottom: 5px;
    }

    .ui-icon ui-icon-circle-triangle-w {
        background-color: antiquewhite;
    }

    .control-group.required .control-label:after {
        content: "*";
        color: red;

    }
 
</style>
<div class="container-fluid-full">

    <div class="row-fluid">
        @Html.Partial("_LibrarymanagementList")
        <div id="content" class="span10">
            <div class="row-fluid">
                <ul class="breadcrumb">
                    <li>
                        <i class="icon-home"></i>@Html.ActionLink("Home", "Login", "Login")<i class="icon-angle-right"></i>
                        @Html.ActionLink("Library Management", "Index", "Library", "")<i class="icon-angle-right"></i>
                    </li>
                    <li class="active">Enter Book/Journal Entries</li>
                </ul>
                <div class="panel-body">
                  
                    @{string status = "";
                        try { status = (TempData["Error"]).ToString(); } catch { TempData["Error"] = ""; }



                        if (status == "Success")
                        {
                  


                      <text><div id="msg"  class="alert alert-success" visible="true">
                     <strong><label id="lblmsg">Records Updated Successfully</label></strong>
                     </div>

                    </text>
                        }
                        else if (status == "Failed")
                        {<text> <div id="msgs"  class="alert alert-success" visible="true">
                        <strong><label id="lblmsgs">Some Error on Updating Records</label></strong>
                    </div>                </text> }
                        else
                        { <text></text>


                            } }
                  
                </div>
                <div class="row-fluid sortable">
                    <div class="box span12">
                        <div class="box-header" data-original-title>
                            <h2><i class="fa fa-edit"></i><span class="break"></span>Enter Book/Journal Entries</h2>
                            <div class="box-icon">

                                <a href="#" class="btn-minimize"><i class="fa fa-chevron-up" aria-hidden="true"></i></a>

                            </div>
                        </div>
                        <div class="box-content">
                            <div id="frm" class="form-horizontal">
                                <fieldset>
                                    <div id="tabs">
                                        <ul id="tabss" class="nav navbar-nav">
                                            <li id="tab1" class="active back"><a href="#tabs-1" style="color: blue;">Book</a></li>
                                            <li id="tab2" class="back"><a href="#tabs-2" style="color: blue;">Journal</a></li>

                                        </ul>
                                        <div id="AddForm">

    @using (Html.BeginForm("BookEntry", "Library", FormMethod.Post, new { enctype = "multipart/form-data", id = "frm", @class = "form-horizontal" }))
    {
        @Html.ValidationSummary(true)
        <div class="control-group span10">
            <span style="color:red">&nbsp;* fields are required</span>
        </div>
        <div id="tabs-1">
            <fieldset class="test" style="width: 100%;">
                <legend>Book Details</legend>
                <div class="control-group span5" id="Bookid">

                    @Html.LabelFor(model => model.bookid, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.bookid, new { placeholder = "Enter Book ID", @class = "input" })

                    </div>
                </div>
               
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.AccessorNo, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.AccessorNo, new { placeholder = "Enter AccessorNo", @class = "input" })

                    </div>
                </div>
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.CallNo, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.CallNo, new { placeholder = "Enter Call No.", @class = "input" })

                    </div>
                </div>

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.booktitle, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.booktitle, new { placeholder = "Enter Book Title Name", @class = "input" })

                    </div>
                </div>

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Volume, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Volume, new { placeholder = "Enter Volume", @class = "input" })

                    </div>
                </div>
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Edition, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Edition, new { placeholder = "Enter Edition", @class = "input" })

                    </div>
                </div>

                <div class="control-group span5">
                    @Html.LabelFor(model => model.CourseId, new { @class = "control-label", @for = "focusedInput" })
                    <div class="controls">
                        @Html.DropDownListFor(model => model.CourseId, new SelectList(Model.courselist, "Courseid", "CourseName", "Select Course"), "Select Course", new { @for = "select" })

                        @Html.ValidationMessageFor(model => model.CourseId)
                    </div>
                </div>

                <div class="control-group span5">
                    @Html.LabelFor(model => model.DeptId, new { @class = "control-label", @for = "select" })
                    <div class="controls">
                        @Html.DropDownListFor(model => model.DeptId, new SelectList(Model._departmentlist, "Dept_id", "Dept_name", "Select Department"), "Select Department", new { @for = "select" })
                        @Html.ValidationMessageFor(model => model.DeptId)
                    </div>
                </div>

                <div class="control-group span5">
                    @Html.LabelFor(model => model.BookCategoryid, new { @class = "control-label", @for = "select" })
                    <div class="controls">
                        @Html.DropDownListFor(model => model.BookCategoryid, new SelectList(Model._bookcategorylist, "BookCategoryId", "CategoryName", "Select Category"), "Select Category", new { @for = "select" })
                        @Html.ValidationMessageFor(model => model.BookCategoryid)
                    </div>
                </div>

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.SerielNumber, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.SerielNumber, new { placeholder = "Enter Serial Number", @class = "input" })

                    </div>
                </div>
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Authorid, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                       @Html.DropDownListFor(model => model.Authorid, new SelectList(Model._authorlist, "Authorid", "Authorname", "Select Author"), "Select Author", new { @for = "select" })
                       
                    </div>
                </div>
                <div id="author">
                    <br/>
                <div class="control-group span5 required" >

                    @Html.LabelFor(model => model.Authorname, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Authorname, new { placeholder = "Enter  Author Name", @class = "input" })

                    </div>
                </div>

            </div>

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.PublishedByid, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                      @Html.DropDownListFor(model => model.PublishedByid, new SelectList(Model._publisherlist, "PublisherId", "Publishername", "Select Publisher"), "Select Publisher", new { @for = "select" })
                       

                    </div>
                </div>
                <div id="publisher">
                    <br />
                <div class="control-group span5 required" >

                    @Html.LabelFor(model => model.PublishedByName, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.PublishedByName, new { placeholder = "Enter Publisher Name", @class = "input" })

                    </div>
                </div>

                </div>
               
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Vendorid, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.DropDownListFor(model => model.Vendorid, new SelectList(Model._vendorlist, "Vendorid", "Vendorname", "Select Vendor"), "Select Vendor", new { @for = "select" })
                      

                    </div>
                </div>
                <div id="vendor">
                    <br />
                <div class="control-group span5 required" >

                    @Html.LabelFor(model => model.Vendorname, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Vendorname, new { placeholder = "Enter Vendor Name", @class = "input" })

                    </div>
                </div>
                    </div>
                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Dateofpurchase, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Dateofpurchase, new { id = "datepicker1", @readonly = "readonly", placeholder = "Select Date of Purchase" })

                    </div>
                </div>

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.BillNo, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.BillNo, new { placeholder = "Enter Bill No", @class = "input" })

                    </div>
                </div>


                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.Cost, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.Cost, new { placeholder = "Enter Cost", @class = "input" })

                    </div>
                </div>


              

                <div class="control-group span5 required">

                    @Html.LabelFor(model => model.ShelfNo, new { @class = "control-label", @for = "focusedInput" })

                    <div class="controls">
                        @Html.TextBoxFor(model => model.ShelfNo, new { placeholder = "Enter Self", @class = "input" })

                    </div>
                </div>
               
                <input type="hidden" name="callnumbers" id="callnumbers" /><br />
            </fieldset>
            <div class="form-actions">
                <div class="control-group span8 pull-right">
                    <input type="submit" class="btn btn-primary"  name="command" value="BookSubmit" id="BookInsert" />
                </div>

            </div>
        </div>
                                        <div id="tabs-2">
                                            <fieldset class="test" style="width: 100%;">
                                                <legend>Journal Details</legend>

                                                <div class="control-group span5" id="journalid">

                                                    @Html.LabelFor(model => model.lib_Jid, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.lib_Jid, new { placeholder = "Enter Journal No.", @class = "input" })

                                                    </div>
                                                </div>
                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.Number, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.Number, new { placeholder = "Accesson Number", @readonly = "true", @class = "input" })

                                                    </div>
                                                </div>
                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JournalTitle, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.JournalTitle, new { placeholder = "Enter Journal Title", @class = "input" })

                                                    </div>
                                                </div>
                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.LibType, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.DropDownListFor(model => model.LibType, new SelectList(Model.courselist, "Courseid", "CourseName", "Select Course"), "Select Course", new { @for = "select" })
                                                       </div>
                                                </div>
                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.Department, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.DropDownListFor(model => model.Department, new SelectList(Model._departmentlist, "Dept_id", "Dept_name", "Select Department"), "Select Department", new { @for = "select" })

                                                    </div>
                                                </div>

                                               

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.LibJVolume, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.LibJVolume, new { placeholder = "Enter Journal Volume", @class = "input" })

                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.IssueType, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @{
                                                            List<SelectListItem> listItems = new List<SelectListItem>();
                                                            listItems.Add(new SelectListItem
                                                            {
                                                                Text = "Monthly",
                                                                Value = "1"
                                                            });
                                                            listItems.Add(new SelectListItem
                                                            {
                                                                Text = "Quarterly",
                                                                Value = "2",

                                                            });
                                                            listItems.Add(new SelectListItem
                                                            {
                                                                Text = "Half Yearly",
                                                                Value = "3",
                                                                Selected = true
                                                            });
                                                            listItems.Add(new SelectListItem
                                                            {
                                                                Text = "yearly",
                                                                Value = "4",
                                                                Selected = true
                                                            });}
                                                        @Html.DropDownListFor(model => model.IssueType, listItems, new { @for = "select" })

                                                    </div>
                                                </div>
                                               
                                              

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JPublisher, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.JPublisher, new { placeholder = "Enter Publisher", @class = "input" })

                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JShelfNo, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.JShelfNo, new { placeholder = "Enter Shelf No.", @class = "input" })

                                                    </div>
                                                </div>
                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JCost, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.JCost, new { placeholder = "Enter Cost", @class = "input" })

                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.IssueDate, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.IssueDate, new { id = "datepicker2", @readonly = "readonly", placeholder = "Select Issue Date" })

                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JVendorId, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.DropDownListFor(model => model.JVendorId, new SelectList(Model._vendorlist, "Vendorid", "Vendorname", "Select Vendor"), "Select Vendor", new { @for = "select" })
                                                       
                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.PurchaseDate, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.PurchaseDate, new { id = "datepicker3", @readonly = "readonly", placeholder = "Select Purchase Date" })

                                                    </div>
                                                </div>

                                                <div class="control-group span5 required">

                                                    @Html.LabelFor(model => model.JBillNo, new { @class = "control-label", @for = "focusedInput" })

                                                    <div class="controls">
                                                        @Html.TextBoxFor(model => model.JBillNo, new { placeholder = "Journal Bill No.", @class = "input" })

                                                    </div>
                                                </div>
                                                </fieldset>
                                            <div class="form-actions">
                                                <div class="control-group span8 pull-right">
                                                    <input type="submit" class="btn btn-primary" name="command" value="JournalSubmit" id="JournalInsert" />
                                                </div>

                                            </div>
                                            </div>


                            }
                                        </div>
                                    </div>
                                    </fieldset>
                                    </div>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
