@model Entity.MarkAllocation
@{
    ViewBag.Title = "ExamMarksAllotment";
    Layout = "~/Views/shared/_SharedLayout.cshtml";
}
<script type="text/javascript">

    $(document).ready(function () {
        FillPermission();
        function GetParameterValues(param) {
            var url = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < url.length; i++) {
                var urlparam = url[i].split('=');
                if (urlparam[0] == param) {
                    return urlparam[1];
                }
            }
        }

        var Examyear = GetParameterValues('ExamYear');
        var ExamTypeid = GetParameterValues('ExaminationTypeid');
        var Classid = GetParameterValues('Classid');
        if (Examyear != null && ExamTypeid != null && Classid != null) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("StudentMarkDetail")',
                dataType: 'json',
                data: { Classid: Classid, ExamTypeid: ExamTypeid, ExamName: ExamName, ExamYear: Examyear },
                success: function (ExaminationDetail) {
                    if (ExaminationDetail != "") {
                        var item = '<tr><th>Exam Name</th><th>Exam Date</th><th>Exam Start Time</th><th>Exam End Time</th><th>Exam Type</th><th>Exam Subject</th><th>Exam Class</th><th>Exam Year</th></tr>';
                        $.each(ExaminationDetail, function (i, Exam) {
                            item += '<tr>'
                            item += '<td>' + Exam.ExamName + '</td>';
                            item += '<td>' + Exam.ExamDate + '</td>';
                            item += '<td>' + Exam.ExamStartDate + '</td>';
                            item += '<td>' + Exam.ExamEndDate + '</td>';
                            item += '<td>' + Exam.ExamType + '</td>';
                            item += '<td>' + Exam.ExamSubject + '</td>';
                            item += '<td>' + Exam.ExamClass + '</td>';
                            item += '<td>' + Exam.ExamYear + '</td>';
                        });
                        $("#tblExamTimeTable").append(item);
                    }
                    else {
                        var item = '<option value="0">select Subject</option>';
                        $("#tblExamTimeTable").append(item);
                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });

            $("#Classid").prop("disabled", true);
            $("#ExaminationTypeid").prop("disabled", true);
            $("#ExamYear").prop("disabled", true);
            $("#display").hide();
            $("#publish").hide();

        }


        function ReloadState() {
            $("#DeptId").empty();
            var item = '<option value="">select Department</option>';
            $("#DeptId").append(item);
        }

        function ReloadCountry() {
            if ($("#CourseId").val() == "") {
                ReloadState();
            }
            else {

                $("#DeptId").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCourse")',
                    dataType: 'json',
                    data: { id: $("#CourseId").val() },
                    success: function (course) {
                        if (course != "") {

                            var item = '<option value="">select Department</option>';
                            $.each(course, function (i, course) {
                                item += '<option value="' + course.Value + '">' + course.Text + '</option>';
                            });
                            $("#DeptId").append(item);
                        }
                        else {
                            var item = '<option value="">select Department</option>';
                            $("#DeptId").append(item);
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve course.' + ex);
                    }
                });
            }
            return false;
        }

        $("#CourseId").change(function () {

            ReloadCountry();
        })


        function ReloadYear() {
            $("#yearid").empty();
            var item = '<option value="">select Year</option>';
            $("#yearid").append(item);
        }

        function ReloadCourseYear() {
            if ($("#DeptId").val() == "") {
                ReloadYear();
            }
            else {

                $("#yearid").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCourseYear")',
                    dataType: 'json',
                    data: {
                        courseid: $("#CourseId").val(),
                        deptid: $("#DeptId").val()
                    },
                    success: function (yeardata) {
                        if (yeardata != "") {

                            var item = '<option value="">select Year</option>';
                            $.each(yeardata, function (i, yeardata) {
                                item += '<option value="' + yeardata.Value + '">' + yeardata.Text + '</option>';
                            });
                            $("#yearid").append(item);
                        }
                        else {
                            var item = '<option value="">select Year</option>';
                            $("#yearid").append(item);
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve course.' + ex);
                    }
                });
            }
            return false;
        }
        $("#DeptId").change(function () {

            ReloadCourseYear();
        })

        $("#display").click(function (e) {
            if (Validations(e) == false)
                return false;
            $("#tblExamTimeTable").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ShowStudentMarks")',
                dataType: 'json',
                data: { CourseId: $("#CourseId").val(), DeptId: $("#DeptId").val(), yearid: $("#yearid").val(), subjectid: $("#Subjectid").val(), Examid: $("#Examid").val(), ExamYear: $("#ExamYear").val() },
                success: function (StudentMarkDetail) {
                    if (StudentMarkDetail != "") {
                        var item = '<tr><th>Student Roll No</th><th>Student Name</th><th>Marks</th><th>Total Marks</th><th>Remark</th><th colspan="2">Action</th></tr>';
                        $.each(StudentMarkDetail, function (i, stud) {
                            item += '<tr>'
                            item += '<td>' + stud.RollNo + '</td>';

                            item += '<td>' + stud.studentname + '</td>';
                            item += '<td><input type="text" style="width:25%" Class="mark" id=M' + stud.Studid + ' value=' + stud.Marks + ' /></td>';
                            item += '<td><input type="text" style="width:25%" Class="Totalmark" id=T' + stud.Studid + ' value=' + stud.TotalMarks + '  /></td>';
                            if (stud.Remark == true) {
                                item += '<td><input type="checkbox" Class="Remark" id=R' + stud.Studid + ' checked="checked" /></td>';
                            }
                            else {
                                item += '<td><input type="checkbox" Class="Remark" id=R' + stud.Studid + ' /></td>';
                            }

                            item += '<td><input type="button" Class="Submit btn-primary btn_edit" id=' + stud.Studid + ' value = "Submit" /></td>';
                        });
                        $("#tblExamTimeTable").append(item);
                    }
                    else {
                        var item = '<option value="0">No record found</option>';
                        $("#tblExamTimeTable").append(item);
                    }
                },
                error: function (ex) {
                    alert('No Records found!..' + ex);
                }
            });


            $("#tblExamTimeTable").on("click", "input.edit", function () {
                var Examid = this.id;
                location.href = '/Examination/ExamTimeTable?Examid=' + Examid;
            });


            return false;
        })

        $("#tblExamTimeTable").on("click", "input.Submit", function () {
           var studid = this.id;
            if (parseInt($("#M" + studid).val()) >= parseInt($("#T" + studid).val())) {
                alert("Mark must be less than Total Marks!!");
                return;
            }
            var remark = "false";
            if ($("#R" + studid).is(":checked")) {
                remark = "true";
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SubmitMark")',
                dataType: 'json',
                data: {
                    Studentid: this.id, Subjectid: $("#Subjectid").val(),
                    ExamId: $("#Examid").val(), Marks: $("#M" + studid).val(), TotalMarks: $("#T" + studid).val(), ExamYear: $("#ExamYear").val(),
                    Remark: remark
                },
                success: function () { },
                error: function (ex) {
                    alert("Record Saved Successfully")
                }
            });

        });


        $("#publish").click(function (e) {
            if (Validations(e) == false)
                return false;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("PublishMarks")',
                data: $('#frm').serialize() + "&evt=submit",
                success: function (result) {
                    $("#msgs").show();
                    $("#lblmsgs").text("PublishMarks successfully!..");
                    $("#lblmsgs").css({ "color": "green" });
                    $("#lblmsgs").css({ "font-size": "15px" });
                    $("#result").html(result);
                    clear();

                    ReloadPaging();
                }
             });
        });

        function Validations(e) {
            var cnt = 0;

            if ($("#CourseId").val() == '' || $("#CourseId").val() == '0') {
                cnt++;
                $("#CourseId").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#CourseId").css({
                    "border": "",
                    "background": ""
                });
            }

            if ($("#ExaminationTypeid").val() == '' || $("#ExaminationTypeid").val() == '0') {
                cnt++;
                $("#ExaminationTypeid").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#ExaminationTypeid").css({
                    "border": "",
                    "background": ""
                });
            }

            if ($("#ExamYear").val() == '') {
                cnt++;
                $("#ExamYear").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#ExamYear").css({
                    "border": "",
                    "background": ""
                });
            }

            if ($("#Subjectid").val() == '' || $("#Subjectid").val() == '0') {
                cnt++;
                $("#Subjectid").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#Subjectid").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#DeptId").val() == '' || $("#DeptId").val() == '0') {
                cnt++;
                $("#DeptId").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#DeptId").css({
                    "border": "",
                    "background": ""
                });
            }
            if ($("#yearid").val() == '' || $("#yearid").val() == '0') {
                cnt++;
                $("#yearid").css({
                    "border": "1px solid red"
                });
            }
            else {
                $("#yearid").css({
                    "border": "",
                    "background": ""
                });
            }

            if (cnt != 0) {
                return false;
            }
        }


        $("#Examid").change(function () {
            $("#Subjectid").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSubject")',
                dataType: 'json',
                data: { id: $("#Examid").val() },
                success: function (Subjects) {
                    if (Subjects != "") {
                        var item = '<option value="0">Select Subject</option>';
                        $.each(Subjects, function (i, subject) {
                            item += '<option value="' + subject.Value + '">' + subject.Text + '</option>';
                        });
                        $("#Subjectid").append(item);
                    }
                    else {
                        var item = '<option value="0">select Subject</option>';
                        $("#Subjectid").append(item);
                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })


    });
</script>@Html.Partial("_PermissionHiddenFlds")
 <div class="container-fluid-full">
             
		<div class="row-fluid">
            @Html.Partial("_ExaminationMenuList")
	<div id="content" class="span10">
        	<div class="row-fluid">
                 
             
             
                    <ul class="breadcrumb">
                       <li><i class="icon-home"></i>@Html.ActionLink("Home", "Login", "Login")<i class="icon-angle-right"></i>
                       @Html.ActionLink("Examination Management", "Index", "Attendance", "")<i class="icon-angle-right"></i></li>
                        <li class="active">Exam Time Table</li>
                    </ul>
                <div class="panel-body"> 
<div id="msg" hidden="hidden" class="alert alert-warning" visible="false">
	<strong><label id="lblmsg"></label></strong> 
	</div>
  <div id="msgs" hidden="hidden" class="alert alert-success" visible="false">
	<strong><label id="lblmsgs"></label></strong> 
</div>
</div>
                   <div class="row-fluid sortable">
              <div class="box span12">
					<div class="box-header" data-original-title>
						<h2><i class="fa fa-edit"></i><span class="break"></span>Form Elements</h2>
						<div class="box-icon">
						
							<a href="#" class="btn-minimize"><i class="fa fa-chevron-up" aria-hidden="true"></i></a>
						
						</div>
					</div>
                               		<div class="box-content">
						<form id="frm" class="form-horizontal">
                              
						
                                  <fieldset>
                                        @using (Html.BeginForm("PublishMarks", "Examination", FormMethod.Post, new { enctype = "multipart/form-data", id = "frm", @class="form-horizontal" }))
                                        {
                                              <div class="control-group">
                                                @TempData["ErrorMessage"]
                                            </div>
                                            <div class="control-group">
                                                @Html.LabelFor(model => model.ExaminationTypeid, new { @class = "control-label", @for = "select" })
                                                <div class="controls">
                                                    @Html.DropDownListFor(model => model.ExaminationTypeid, new SelectList(Model.ExaminationTypeList, "ExaminationTypeId", "ExaminationType", "Select Examination Type"), "Select Examination Type", new { @for = "select" })
                                                    @Html.ValidationMessageFor(model => model.ExaminationTypeid)
                                                </div>
                                            </div>
                                            <div class="control-group">
                                                @Html.LabelFor(model => model.CourseId, new { @class = "control-label" })
                                                <div class="controls">
                                                    @Html.DropDownListFor(model => model.CourseId, new SelectList(Model._Courselist, "Courseid", "CourseName", "Select Course"), "Select Course", new { @for = "select" })
                                                    @Html.ValidationMessageFor(model => model.CourseId)
                                                </div>
                                            </div>
                                            <div class="control-group">
                                                @Html.LabelFor(model => model.DeptId, new { @class = "control-label" })
                                                <div class="controls">
                                                    @Html.DropDownListFor(model => model.DeptId, new SelectList(Model._Deptlist, "Dept_id", "Dept_name", "Select Department"), "Select Department", new { @for = "select" })
                                                    @Html.ValidationMessageFor(model => model.DeptId)
                                                </div>
                                            </div>

                                                <div class="control-group">
                                                    @Html.LabelFor(model => model.yearid, new { @class = "control-label" })
                                                    <div class="controls">
                                                        @Html.DropDownListFor(model => model.yearid, new SelectList(Model._yearlist, "yearid", "YearName", "Select Year"), "Select Year", new { @for = "select" })
                                                        @Html.ValidationMessageFor(model => model.yearid)
                                                    </div>
                                                </div>
                                                <div class="control-group">
                                                    @Html.LabelFor(model => model.Examid, new { @class = "control-label" })
                                                    <div class="controls">
                                                        @Html.DropDownListFor(model => model.Examid, new SelectList(Model.ExamTable, "ExamId", "ExamName", "Select Exam"), "Select Exam", new { @for = "select" })
                                                        @Html.ValidationMessageFor(model => model.Examid)
                                                    </div>
                                                </div>
                                            <div class="control-group">
                                                @Html.LabelFor(model => model.Subjectid, new { @class="control-label"  })
                                                  <div class="controls">
                                                @Html.DropDownListFor(model => model.Subjectid, new SelectList(Model.SubjectList, "Subjectid", "SubjectNm", "Select Subject"), "Select Subject", new { @for = "select" })
                                                @Html.ValidationMessageFor(model => model.Subjectid)
                                                      </div>
                                            </div>
                                            <div class="control-group">
                                                @Html.LabelFor(model => model.ExamYear, new { @class="control-label"  })
                                                  <div class="controls">
                                                
                                                @Html.DropDownListFor(m => m.ExamYear, new SelectList(Model.ExamYear), "Select Year", new { @for = "select" })
                                                @Html.ValidationMessageFor(model => model.ExamYear)
                                                      </div>
                                            </div>
                                        <div class="form-actions">
                                                <input type="submit" action="display" class="btn btn-primary" id="display" value="Display" />
                                                <input type="submit" action="publish" class="btn btn-primary" id="publish" value="Publish" />
                                            </div>


                                        }
                                         </fieldset>
                                </form>
					
					</div>
				</div><!--/span-->
			
			</div><!--/row-->

                 <div class="row-fluid sortable">
              <div class="box span12">
                  	<div class="box-header" data-original-title>
						<h2><i class="fa fa-edit"></i><span class="break"></span>Form Elements</h2>
						<div class="box-icon">
						
							<a href="#" class="btn-minimize"><i class="fa fa-chevron-up" aria-hidden="true"></i></a>
						
						</div>
					</div> 
                  <div class="box-content">
                            <div class="table-responsive" style="color: #23527c;">
                                <table class="table tb-parshav" id="tblExamTimeTable">
                                    <tr>
                                        <td></td>
                                    </tr>
                                </table>
                            </div>
                            <!-- table end -->
                        </div>
                        
                
        </div>
        </div>
    </div>
</div>
   
            </div>
    </div>