@model Entity.Studentviewmodel
@{
    ViewBag.Title = "Online Admission Form";
}
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Online Admission Form</title>
    <link href="../../CSS/bootstrap.css" rel="stylesheet" />
    <link href="../../CSS/style.css" rel="stylesheet" />
    <link href="../../CSS/style_new.css" rel="stylesheet" />
    <link href="../../CSS/jquery-ui.css" rel="stylesheet" type="text/css" />
    <script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
    <script src="../../Scripts/jquery-ui.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("#insert").click(function (e) {
                Validations(e);
            });
            $("#attach").hide();
            //        $("#tabss").find("#tab3").addClass("ui-tabs-active ui-state-active");
            //        $("#tabs - 3").attr("display", "block");
            //        $("#tabs - 2").attr("display", "none");
            //        $("#tabs - 3").attr("aria-hidden",false);
            //        $("#tabs - 1").attr("display", "none");


            $("#academicyear").val("2016-2017");

            $("#StudEmail").blur(function () {
                var Email = $("#StudEmail").val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("CheckStudEmail")',
                    dataType: 'JSON',
                    data: { Email: Email },
                    success: function (data) {
                        if (data.StudEmail != "") {
                            $("#StudEmail").val('');
                            alert("Student Email Already Exists in our Database!");
                        }
                    }
                });
            });

            $("#lblmsg").text('');
            $('#studid input').attr("readonly", true);
            if ($("#studid input").val() == "0") {
                $("#studid").hide();
            }
            else {
                var studid = $("#studid input").val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("FillStudentDetails")',
                    dataType: 'JSON',
                    data: { studid: studid },
                    success: function (data) {
                        $("#Studnm").val(data.Studnm);
                        $("#Studfathernm").val(data.Studfathernm);
                        $("#Studmothernm").val(data.Studmothernm);
                        var value = new Date(parseInt(data.DOB.substr(6)));
                        $('#datepicker').datepicker('setDate', value);
                        $("#Weight").val(data.Weight);
                        $("#Height").val(data.Height);
                        $("#StudBldGrp").val(data.StudBldGrp);
                        $("#StudEmail").val(data.StudEmail);
                        $("#Disease").val(data.Disease);
                        $("#Religionid").val(data.Religionid);
                        $("#Casteid").empty();
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("GetCastes")',
                            dataType: 'json',
                            data: { id: $("#Religionid").val() },
                            success: function (castes) {
                                if (castes != "") {
                                    var item = '<option value="0">select caste</option>';
                                    $.each(castes, function (i, caste) {
                                        item += '<option value="' + caste.Value + '">' + caste.Text + '</option>';
                                    });
                                    $("#Casteid").append(item);
                                    $("#Casteid").val(data.Casteid);
                                }
                                else {
                                    var item = '<option value="0">select caste</option>';
                                    $("#Casteid").append(item);
                                }
                            },
                            error: function (ex) {
                                alert('Failed to retrieve castes.' + ex);
                            }
                        });
                        $("#Classid").val(data.Classid);
                        $("#RollNo").val(data.RollNo);
                        if (data.Gender == 1) {
                            $("#male").prop("checked", "checked");
                        }
                        else {
                            $("#female").prop("checked", "checked");
                        }
                        $("#MotherTongue").val(data.MotherTongue);
                        $("#PreviousSchool").val(data.PreviousSchool);
                        $("#SchoolAddress").val(data.SchoolAddress);
                        $("#LastClass").val(data.LastClass);
                        $("#Grade").val(data.Grade);
                        $("#LeaveYear").val(data.LeaveYear);
                        $("#LeaveReason").val(data.LeaveReason);
                        $("#PrincipalNm").val(data.PrincipalNm);
                        $("#ReferenceNm").val(data.ReferenceNm);
                        $("#RCode").val(data.RCode);
                        $("#ReferenceContact").val(data.ReferenceContact);
                        $("#BusFacility").prop('checked', data.BusFacility);
                        $("#BusNo").val(data.BusNo);
                        $("#BusRTONo").val(data.BusRTONo);
                        $("#EmergencyPhysicianNm").val(data.EmergencyPhysicianNm);
                        $("#EmergencyPhysicianContact").val(data.EmergencyPhysicianContact);
                        $("#EmergencyAddress").val(data.EmergencyAddress);
                        $("#FatherOccpationid").val(data.FatherOccpationid);
                        $("#FatherQualificationid").val(data.FatherQualificationid);
                        $("#FatherEmail").val(data.FatherEmail);
                        $("#FatherOfficeAddress").val(data.FatherOfficeAddress);
                        $("#FatherContact").val(data.FatherContact);
                        $("#FatherBldGrpid").val(data.FatherBldGrpid);
                        $("#MotherOccpationid").val(data.MotherOccpationid);
                        $("#MotherQualificationid").val(data.MotherQualificationid);
                        $("#MotherEmail").val(data.MotherEmail);
                        $("#MotherOfficeAddress").val(data.MotherOfficeAddress);
                        $("#MotherContact").val(data.MotherContact);
                        $("#MotherBldGrpid").val(data.MotherBldGrpid);
                        $("#pic1").append('<img src="/Student/getImg1/' + $("#Studid").val() + '" style="width: 190px;height: 240px;" alt="Father Pic">');
                        $("#pic2").append('<img src="/Student/getImg2/' + $("#Studid").val() + '" style="width: 190px;height: 240px;" alt="Mothers Pic">');
                        $("#pic3").append('<img src="/Student/getImg3/' + $("#Studid").val() + '" style="width: 190px;height: 240px;" alt="Student Pic">');

                        $("#Countryid").val(data.Countryid);
                        $("#Stateid").empty();
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("GetStates")',
                            dataType: 'json',
                            data: { id: data.Countryid },
                            success: function (states) {
                                if (states != "") {
                                    var item = '<option value="0">select State</option>';
                                    $.each(states, function (i, state) {
                                        item += '<option value="' + state.Value + '">' + state.Text + '</option>';
                                    });
                                    $("#Stateid").append(item);
                                    $("#Stateid").val(data.Stateid);
                                }
                                else {
                                    var item = '<option value="0">select State</option>';
                                    $("#Stateid").append(item);
                                }
                            },
                            error: function (ex) {
                                alert('Failed to retrieve states.' + ex);
                            }
                        });
                        $("#Cityid").empty();
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("GetCities")',
                            dataType: 'json',
                            data: { id: data.Stateid },
                            success: function (cities) {
                                if (cities != "") {
                                    var item = '<option value="0">select City</option>';
                                    $.each(cities, function (i, city) {
                                        item += '<option value="' + city.Value + '">' + city.Text + '</option>';
                                    });
                                    $("#Cityid").append(item);
                                    $("#Cityid").val(data.Cityid);
                                }
                                else {
                                    var item = '<option value="0">select City</option>';
                                    $("#Cityid").append(item);
                                }
                            },
                            error: function (ex) {
                                alert('Failed to retrieve states.' + ex);
                            }
                        });
                        $("#CurrentAddress").val(data.CurrentAddress);
                        $("#PermanentAddress").val(data.PermanentAddress);
                        $("#academicyear").val(data.academicyear);
                    }
                });
            }
            $('#datepicker').attr("readonly", true);

            $('#datepicker').datepicker({
                inline: true,
                showOtherMonths: true,
                showOtherYears: true,
                dayNamesMin: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                dateFormat: 'mm/dd/yy',
                changeMonth: true,
                yearRange: "-100:+0",
                changeYear: true
            });
            $('#datepicker').datepicker('setDate', new Date());
            function Validations(e) {
                var cnt = 0;
                if ($("#Studnm").val() == '') {
                    cnt++;
                    $("#Studnm").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Studnm").css({
                        "border": "",
                        "background": ""
                    });
                }


                if ($("#Studfathernm").val() == '') {
                    cnt++;
                    $("#Studfathernm").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Studfathernm").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#Studmothernm").val() == '') {
                    cnt++;
                    $("#Studmothernm").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Studmothernm").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#datepicker").val() == '') {
                    cnt++;
                    $("#datepicker").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#datepicker").css({
                        "border": "",
                        "background": ""
                    });
                }



                if ($("#StudBldGrp").val() == '') {
                    cnt++;
                    $("#StudBldGrp").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#StudBldGrp").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#StudEmail").val() == '') {
                    cnt++;
                    $("#StudEmail").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#StudEmail").css({
                        "border": "",
                        "background": ""
                    });
                }



                if ($("#Religionid").val() == '') {
                    cnt++;
                    $("#Religionid").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Religionid").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#Casteid").val() == '') {
                    cnt++;
                    $("#Casteid").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Casteid").css({
                        "border": "",
                        "background": ""
                    });
                }



                //            if ($("#MotherTongue").val() == '') {
                //                cnt++;
                //                $("#MotherTongue").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherTongue").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //                if ($("#PreviousSchool").val() == '') {
                //                    cnt++;
                //                    $("#PreviousSchool").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#PreviousSchool").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#SchoolAddress").val() == '') {
                //                    cnt++;
                //                    $("#SchoolAddress").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#SchoolAddress").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#LastClass").val() == '') {
                //                    cnt++;
                //                    $("#LastClass").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#LastClass").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#Grade").val() == '') {
                //                    cnt++;
                //                    $("#Grade").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#Grade").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#LeaveYear").val() == '') {
                //                    cnt++;
                //                    $("#LeaveYear").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#LeaveYear").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#LeaveReason").val() == '') {
                //                    cnt++;
                //                    $("#LeaveReason").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#LeaveReason").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#PrincipalNm").val() == '') {
                //                    cnt++;
                //                    $("#PrincipalNm").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#PrincipalNm").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#ReferenceNm").val() == '') {
                //                    cnt++;
                //                    $("#ReferenceNm").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#ReferenceNm").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }

                //                if ($("#ReferenceContact").val() == '') {
                //                    cnt++;
                //                    $("#ReferenceContact").css({
                //                        "border": "1px solid red"
                //                    });
                //                }
                //                else {
                //                    $("#ReferenceContact").css({
                //                        "border": "",
                //                        "background": ""
                //                    });
                //                }


                //            if ($("#FatherOccpationid").val() == '') {
                //                cnt++;
                //                $("#FatherOccpationid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherOccpationid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#FatherQualificationid").val() == '') {
                //                cnt++;
                //                $("#FatherQualificationid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherQualificationid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#FatherEmail").val() == '') {
                //                cnt++;
                //                $("#FatherEmail").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherEmail").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }


                //            if ($("#FatherOfficeAddress").val() == '') {
                //                cnt++;
                //                $("#FatherOfficeAddress").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherOfficeAddress").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#FatherContact").val() == '') {
                //                cnt++;
                //                $("#FatherContact").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherContact").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#FatherBldGrpid").val() == '') {
                //                cnt++;
                //                $("#FatherBldGrpid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#FatherBldGrpid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherOccpationid").val() == '') {
                //                cnt++;
                //                $("#MotherOccpationid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherOccpationid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherQualificationid").val() == '') {
                //                cnt++;
                //                $("#MotherQualificationid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherQualificationid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherEmail").val() == '') {
                //                cnt++;
                //                $("#MotherEmail").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherEmail").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherOfficeAddress").val() == '') {
                //                cnt++;
                //                $("#MotherOfficeAddress").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherOfficeAddress").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherContact").val() == '') {
                //                cnt++;
                //                $("#MotherContact").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherContact").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                //            if ($("#MotherBldGrpid").val() == '') {
                //                cnt++;
                //                $("#MotherBldGrpid").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#MotherBldGrpid").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                if ($("#Countryid").val() == '') {
                    cnt++;
                    $("#Countryid").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Countryid").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#Stateid").val() == '') {
                    cnt++;
                    $("#Stateid").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Stateid").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#Cityid").val() == '') {
                    cnt++;
                    $("#Cityid").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#Cityid").css({
                        "border": "",
                        "background": ""
                    });
                }

                if ($("#CurrentAddress").val() == '') {
                    cnt++;
                    $("#CurrentAddress").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#CurrentAddress").css({
                        "border": "",
                        "background": ""
                    });
                }

                //            if ($("#PermanentAddress").val() == '') {
                //                cnt++;
                //                $("#PermanentAddress").css({
                //                    "border": "1px solid red"
                //                });
                //            }
                //            else {
                //                $("#PermanentAddress").css({
                //                    "border": "",
                //                    "background": ""
                //                });
                //            }

                if ($("#academicyear").val() == '') {
                    cnt++;
                    $("#academicyear").css({
                        "border": "1px solid red"
                    });
                }
                else {
                    $("#academicyear").css({
                        "border": "",
                        "background": ""
                    });
                }

                if (cnt != 0) {
                    e.preventDefault();
                }
            }

            $("#Religionid").change(function () {
                if ($("#Religionid").val() == "") {
                    $("#Casteid").empty();
                    var item = '<option value="0">select Caste</option>';
                    $("#Casteid").append(item);
                }
                else {
                    $("#Casteid").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetCastes")',
                        dataType: 'json',
                        data: { id: $("#Religionid").val() },
                        success: function (castes) {
                            if (castes != "") {
                                var item = '<option value="0">select caste</option>';
                                $.each(castes, function (i, caste) {
                                    item += '<option value="' + caste.Value + '">' + caste.Text + '</option>';
                                });
                                $("#Casteid").append(item);
                            }
                            else {
                                var item = '<option value="0">select caste</option>';
                                $("#Casteid").append(item);
                            }
                        },
                        error: function (ex) {
                            alert('Failed to retrieve castes.' + ex);
                        }
                    });
                }
                return false;
            })

            $("#Countryid").change(function () {
                if ($("#Countryid").val() == "") {
                    $("#Stateid").empty();
                    var item = '<option value="0">select State</option>';
                    $("#Stateid").append(item);
                    $("#Cityid").empty();
                    var item = '<option value="0">select City</option>';
                    $("#Cityid").append(item);
                    $("#state").val('')
                    $("#city").val('')
                }
                else {
                    $("#Stateid").empty();
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetStates")',
                        dataType: 'json',
                        data: { id: $("#Countryid").val() },
                        success: function (states) {
                            if (states != "") {
                                var item = '<option value="0">select State</option>';
                                $.each(states, function (i, state) {
                                    item += '<option value="' + state.Value + '">' + state.Text + '</option>';
                                });
                                $("#Stateid").append(item);
                            }
                            else {
                                var item = '<option value="0">select State</option>';
                                $("#Stateid").append(item);
                            }
                        },
                        error: function (ex) {
                            alert('Failed to retrieve states.' + ex);
                        }
                    });
                }
                return false;
            })

            $("#Stateid").change(function () {
                $("#Cityid").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCities")',
                    dataType: 'json',
                    data: { id: $("#Stateid").val() },
                    success: function (cities) {
                        if (cities != "") {
                            var item = '<option value="0">select City</option>';
                            $.each(cities, function (i, city) {
                                item += '<option value="' + city.Value + '">' + city.Text + '</option>';
                            });
                            $("#Cityid").append(item);
                        }
                        else {
                            var item = '<option value="0">select City</option>';
                            $("#Cityid").append(item);
                        }
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
                return false;
            })

            $("#Weight").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#Height").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#FatherContact").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#MotherContact").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#RollNo").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#academicyear").keypress(function (e) {
                if (e.which != 8 && e.which != 45 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#EmergencyPhysicianContact").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#LeaveYear").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#ReferenceContact").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });

            $("#RCode").keypress(function (e) {
                if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                    $("#errmsg").html("Digits Only").show().fadeOut("slow");
                    return false;
                }
            });


            function ValidateEmail(email) {
                var expr = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
                return expr.test(email);
            };

            $('#FatherEmail').blur(function () {
                if (!ValidateEmail($("#FatherEmail").val())) {
                    $("#FatherEmail").css({
                        "border": "1px solid red"
                    });
                    alert("Father's Email address is invalid!..");
                    return false;
                }
                else {
                    $("#FatherEmail").css({
                        "border": "",
                        "background": ""
                    });
                }
            });

            $('#StudEmail').blur(function () {
                if (!ValidateEmail($("#StudEmail").val())) {
                    $("#StudEmail").css({
                        "border": "1px solid red"
                    });
                    alert("Student's Email address is invalid!..");
                    return false;
                }
                else {
                    $("#StudEmail").css({
                        "border": "",
                        "background": ""
                    });
                }
            });

            $('#MotherEmail').blur(function () {
                if (!ValidateEmail($("#MotherEmail").val())) {
                    $("#MotherEmail").css({
                        "border": "1px solid red"
                    });
                    alert("Mother's Email address is invalid!..");
                    return false;
                }
                else {
                    $("#MotherEmail").css({
                        "border": "",
                        "background": ""
                    });
                }
            });
        });
    </script>
    <style type="text/css">
        fieldset
        {
            border: 1px solid #777;
            text-align: left;
        }
        
        legend
        {
            float: left;
            margin-right: 0.5em;
            padding-top: 0.2em;
            text-align: left;
            font-size: 18px;
            background-color: gainsboro;
        }
    </style>
    @*<style type="text/css">
        .exclude
        {
            display: none;
        }
        #Text1
        {
            width: 197px;
        }
        #Text2
        {
            width: 200px;
        }
        #Text2
        {
            width: 197px;
        }
        td
        {
            font-family: Arial;
            color: White;
        }
        .td-gray
        {
            background-color: lightgray;
        }
        .required
        {
            color: #004A80;
            width: 200px;
        }
        .Button
        {
            background-color: #004A80;
            color: White;
        }
        .inline_anchor
        {
            text-decoration: none;
            color: #004A80;
        }
        legend
        {
            color: #004A80;
        }
    </style>*@
</head>
<body>
    <div class="container-fluid">
        <div class="row" style="margin-bottom: 90px;">
            @Html.Partial("_Banner")
            <div class="row">
                <nav class="navbar-parshav ">
                    <div class="container">
                        @Html.Partial("_Header")
                    </div><!-- /.container -->
                </nav>
                <center>
                    <div class="col-md-12">
                        <div class="col-md-12" style="margin-bottom: 15px;">
                            <center>
                                @using (Html.BeginForm("Admission_DML", "Student", FormMethod.Post, new { @class = "form-inline", enctype = "multipart/form-data" }))
                                {
                                    @Html.Hidden("FormType", "O_type")
                                    @Html.ValidationSummary(true)
                                    var fromdt = Convert.ToString(System.DateTime.Now.Year);
                                    var todt = Convert.ToString(System.DateTime.Now.AddYears(1).Year);
                                    var session = Convert.ToString(fromdt + "-" + todt);
                                    <h3>
                                        New Admission Register
                                    </h3>
                                    <div align="center" id="lblmsg">
                                    </div>
                                    <fieldset class="test" style="width: 100%">
                                        <legend>Student Details</legend>
                                        <div id="studid">
                                            <div class="editor-label form-group col-xs-2">
                                                @Html.LabelFor(model => model.Studid, new { @class = "maru-size" })
                                            </div>
                                            <div class="form-group col-xs-2">
                                                @Html.TextBoxFor(model => model.Studid, new { @class = "form-control mar", placeholder = "Enter Student ID" })
                                                @Html.ValidationMessageFor(model => model.Studid)
                                            </div>
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Studnm, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.Studnm, new { @class = "form-control mar", placeholder = "Enter Student Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.Studnm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Studfathernm, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.Studfathernm, new { @class = "form-control mar", placeholder = "Enter Father's Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.Studfathernm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Studmothernm, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.Studmothernm, new { @class = "form-control mar", placeholder = "Enter Mother's Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.Studmothernm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.DOB, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.DOB, new { id = "datepicker", @class = "form-control mar", placeholder = "Select Date of birth" })
                                            @Html.ValidationMessageFor(model => model.DOB)
                                        </div>
                                        <div class="editor-label form-group col-xs-2" style="display: none;">
                                            @Html.LabelFor(model => model.Weight, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2" style="display: none;">
                                            @Html.TextBoxFor(model => model.Weight, new { @class = "form-control mar", placeholder = "Enter Weight in Kg", maxlength = "3" })
                                            @Html.ValidationMessageFor(model => model.Weight)
                                        </div>
                                        <div class="editor-label form-group col-xs-2" style="display: none;">
                                            @Html.LabelFor(model => model.Height, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2" style="display: none;">
                                            @Html.TextBoxFor(model => model.Height, new { @class = "form-control mar", placeholder = "Enter Height in Cms", maxlength = "3" })
                                            @Html.ValidationMessageFor(model => model.Height)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.StudBldGrp, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.StudBldGrp, new SelectList(Model.bloodgrouplist, "bloodgroupid", "bloodgroupnm", "Select Blood Group"), "Select Blood Group", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.StudBldGrp)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.StudEmail, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.StudEmail, new { @class = "form-control mar", placeholder = "Enter Student's Email", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.StudEmail)
                                        </div>
                                        <div class="editor-label form-group col-xs-2" style="display: none;">
                                            @Html.LabelFor(model => model.Disease, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2" style="display: none;">
                                            @Html.TextBoxFor(model => model.Disease, new { @class = "form-control mar", placeholder = "Enter Disease", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.Disease)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Religionid, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.Religionid, new SelectList(Model.religionlist, "Religionid", "Religionnm", "Select Religion"), "Select Religion", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Religionid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Casteid, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.Casteid, new SelectList(Model.castelist, "Casteid", "CasteName", "Select Caste"), "Select Caste", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Casteid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2" style="display: none;">
                                            @Html.LabelFor(model => model.MotherTongue, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2" style="display: none;">
                                            @Html.TextBoxFor(model => model.MotherTongue, new { @class = "form-control mar", placeholder = "Enter Mother Tongue", maxlength = "45" })
                                            @Html.ValidationMessageFor(model => model.MotherTongue)
                                        </div>
                                    </fieldset>
                                    <br />
                                    <div style="display: none;">
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherOccpationid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.FatherOccpationid, new SelectList(Model.occupationlist, "occupationid", "occupationnm", "Select Occupation"), "Select Occupation", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.FatherOccpationid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherQualificationid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.FatherQualificationid, new SelectList(Model.qualificationlist, "qualificationid", "qualificationnm", "Select Qualification"), "Select Qualification", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.FatherQualificationid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherEmail, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.FatherEmail, new { @class = "form-control mar", placeholder = "Enter Father's Email", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.FatherEmail)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherOfficeAddress, new { @class = "maru-size" })
                                            @Html.TextAreaFor(model => model.FatherOfficeAddress, new { @class = "form-control mar", placeholder = "Enter Father's Office Address" })
                                            @Html.ValidationMessageFor(model => model.FatherOfficeAddress)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherPic, new { @class = "maru-size" })
                                            <input type="file" name="files1" id="FatherPic" style="width: 100%;" />
                                            <div id="pic1">
                                            </div>
                                            @Html.ValidationMessageFor(model => model.FatherPic)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherContact, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.FatherContact, new { @class = "form-control mar", placeholder = "Enter Father's Contact Number", maxlength = "12" })
                                            @Html.ValidationMessageFor(model => model.FatherContact)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.FatherBldGrpid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.FatherBldGrpid, new SelectList(Model.bloodgrouplist, "bloodgroupid", "bloodgroupnm", "Select Blood Group"), "Select Blood Group", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.FatherBldGrpid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherOccpationid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.MotherOccpationid, new SelectList(Model.occupationlist, "occupationid", "occupationnm", "Select Occupation"), "Select Occupation", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.MotherOccpationid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherQualificationid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.MotherQualificationid, new SelectList(Model.qualificationlist, "qualificationid", "qualificationnm", "Select Qualification"), "Select Qualification", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.MotherQualificationid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherEmail, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.MotherEmail, new { @class = "form-control mar", placeholder = "Enter Mother's Email", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.MotherEmail)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherOfficeAddress, new { @class = "maru-size" })
                                            @Html.TextAreaFor(model => model.MotherOfficeAddress, new { @class = "form-control mar", placeholder = "Enter Mother's Office Address" })
                                            @Html.ValidationMessageFor(model => model.MotherOfficeAddress)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherPic, new { @class = "maru-size" })
                                            <input type="file" name="files2" id="MotherPic" style="width: 100%;" />
                                            <div id="pic2">
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MotherPic)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherContact, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.MotherContact, new { @class = "form-control mar", placeholder = "Enter Mother's Contact Number", maxlength = "12" })
                                            @Html.ValidationMessageFor(model => model.MotherContact)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.MotherBldGrpid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.MotherBldGrpid, new SelectList(Model.bloodgrouplist, "bloodgroupid", "bloodgroupnm", "Select Blood Group"), "Select Blood Group", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.MotherBldGrpid)
                                        </div>
                                    </div>
                                    <fieldset class="test" style="width: 100%;">
                                        <legend>Location Details</legend>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Countryid, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.Countryid, new SelectList(Model.countrylist, "Countryid", "CountryName", "Select Country"), "Select Country", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Countryid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Stateid, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.Stateid, new SelectList(Model.statelist, "Stateid", "StateName", "Select State"), "Select state", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Stateid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Cityid, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.DropDownListFor(m => m.Cityid, new SelectList(Model.citylist, "Cityid", "CityName", "Select City"), "Select City", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Cityid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.CurrentAddress, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextAreaFor(model => model.CurrentAddress, new { @class = "form-control mar", placeholder = "Enter Current Address" })
                                            @Html.ValidationMessageFor(model => model.CurrentAddress)
                                        </div>
                                        <div class="editor-label form-group col-xs-2" style="display: none;">
                                            @Html.LabelFor(model => model.PermanentAddress, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2" style="display: none;">
                                            @Html.TextAreaFor(model => model.PermanentAddress, new { @class = "form-control mar", placeholder = "Enter Permanent Address" })
                                            @Html.ValidationMessageFor(model => model.PermanentAddress)
                                        </div>
                                    </fieldset>
                                    <br />
                                    <div style="display: none;">
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Classid, new { @class = "maru-size" })
                                            @Html.DropDownListFor(m => m.Classid, new SelectList(Model.classlist, "Classid", "Classnm", "Select Class"), "Select Class", new { @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.Classid)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.RollNo, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.RollNo, new { @class = "form-control mar", placeholder = "Enter Roll No", maxlength = "3" })
                                            @Html.ValidationMessageFor(model => model.RollNo)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Gender, new { @class = "maru-size" })
                                            @Html.RadioButtonFor(model => model.Gender, "true", new { id = "male" })
                                            Male
                                            @Html.RadioButtonFor(model => model.Gender, "false", new { id = "female" }) FeMale
                                            @Html.ValidationMessageFor(model => model.Gender)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.StudPic, new { @class = "maru-size" })
                                            <input type="file" name="files3" id="file" style="width: 100%;" />
                                            <div id="pic3">
                                            </div>
                                            @Html.ValidationMessageFor(model => model.StudPic)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.academicyear, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.academicyear, new { @class = "form-control mar", placeholder = "Enter Academic Year", maxlength = "9" })
                                            @Html.ValidationMessageFor(model => model.academicyear)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.BusFacility, new { @class = "maru-size" })
                                            @Html.CheckBoxFor(model => model.BusFacility)
                                            @Html.ValidationMessageFor(model => model.BusFacility)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.BusNo, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.BusNo, new { @class = "form-control mar", placeholder = "Enter Bus No.", maxlength = "15" })
                                            @Html.ValidationMessageFor(model => model.BusNo)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.BusRTONo, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.BusRTONo, new { @class = "form-control mar", placeholder = "Enter Bus RTO No.", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.BusRTONo)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.EmergencyPhysicianNm, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.EmergencyPhysicianNm, new { @class = "form-control mar", placeholder = "Enter Emergency Physician Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.EmergencyPhysicianNm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.EmergencyPhysicianContact, new { @class = "maru-size" })
                                            @Html.TextBoxFor(model => model.EmergencyPhysicianContact, new { @class = "form-control mar", placeholder = "Enter Emergency Physician Contact", maxlength = "12" })
                                            @Html.ValidationMessageFor(model => model.EmergencyPhysicianContact)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.EmergencyAddress, new { @class = "maru-size" })
                                            @Html.TextAreaFor(model => model.EmergencyAddress, new { @class = "form-control mar", placeholder = "Enter Emergency Address" })
                                            @Html.ValidationMessageFor(model => model.EmergencyAddress)
                                        </div>
                                    </div>
                                    <fieldset class="test" style="width: 100%;">
                                        <legend>Previous Education Details</legend>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.PreviousSchool, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.PreviousSchool, new { @class = "form-control mar", placeholder = "Enter Previous School", maxlength = "30" })
                                            @Html.ValidationMessageFor(model => model.PreviousSchool)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.SchoolAddress, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextAreaFor(model => model.SchoolAddress, new { @class = "form-control mar", placeholder = "Enter School Address" })
                                            @Html.ValidationMessageFor(model => model.SchoolAddress)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.LastClass, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @*@Html.DropDownListFor(m => m.LastClass, new SelectList(Model.classlist, "Classid", "Classnm", "Select Class"), "Select Class", new { @class = "form-control mar" })*@
                                            @Html.TextBoxFor(model => model.LastClass, new { placeholder = "Class during Leaving", @class = "form-control mar" })
                                            @Html.ValidationMessageFor(model => model.LastClass)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.Grade, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.Grade, new { @class = "form-control mar", placeholder = "Enter Grade While Leaving", maxlength = "10" })
                                            @Html.ValidationMessageFor(model => model.Grade)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.LeaveYear, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.LeaveYear, new { @class = "form-control mar", placeholder = "Enter Year of Leaving", maxlength = "9" })
                                            @Html.ValidationMessageFor(model => model.LeaveYear)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.LeaveReason, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextAreaFor(model => model.LeaveReason, new { @class = "form-control mar", placeholder = "Enter Leave Reason" })
                                            @Html.ValidationMessageFor(model => model.LeaveReason)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.PrincipalNm, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.PrincipalNm, new { @class = "form-control mar", placeholder = "Enter Principal Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.PrincipalNm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.ReferenceNm, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                            @Html.TextBoxFor(model => model.ReferenceNm, new { @class = "form-control mar", placeholder = "Enter Reference Contact Name", maxlength = "20" })
                                            @Html.ValidationMessageFor(model => model.ReferenceNm)
                                        </div>
                                        <div class="editor-label form-group col-xs-2">
                                            @Html.LabelFor(model => model.ReferenceContact, new { @class = "maru-size" })
                                        </div>
                                        <div class="form-group col-xs-2">
                                                @Html.TextBoxFor(model => model.RCode, new { placeholder = "Code", maxlength = "4", @class = "form-control mar", @Style = "width:30%" })
                                            @Html.TextBoxFor(model => model.ReferenceContact, new { @class = "form-control mar", placeholder = "Enter Reference Contact Number", maxlength = "10", @Style = "width:63%" })
                                            @Html.ValidationMessageFor(model => model.ReferenceContact)
                                        </div>
                                        <div class="form-group col-xs-6" style="font-size: 13px;">
                                            @Html.Partial("_MultipleAttachments")
                                        </div>
                                    </fieldset>
                                    <input type="submit" class="btn btn-primary" action="insert" id="insert" value="Submit" />

                                }
                            </center>
                        </div>
                    </div>
                </center>
            </div>
        </div>
    </div>
    @Html.Partial("_Footer")
    <!-- img-responsive bnr-img -->
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="../../Scripts/bootstrap.min.js"></script>
</body>
</html>
